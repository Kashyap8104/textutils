{"version":3,"sources":["components/Alert.js","components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","alert","React","createElement","className","concat","type","role","word","lower","toLowerCase","charAt","toUpperCase","slice","capitalize","msg","data-dismiss","aria-label","Navbar","mode","href","title","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","id","aria-current","aboutText","onClick","toggleMode","htmlFor","TextForm","text","setText","useState","Fragment","style","color","heading","value","onChange","event","target","rows","backgroundColor","handleUpClick","newText","showAlert","handleLoClick","handleClearClick","handleCopy","document","getElementById","select","navigator","clipboard","writeText","handleExtraSpaces","split","join","length","defaultProps","App","setMode","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode"],"mappings":"0MAEe,SAASA,EAAMC,GAK5B,OACFA,EAAMC,OAASC,IAAAC,cAAA,OAAKC,UAAS,eAAAC,OAAiBL,EAAMC,MAAMK,KAAI,gCAAgCC,KAAK,SACjGL,IAAAC,cAAA,cANqBK,KACf,MAAMC,EAAQD,EAAKE,cACnB,OAAOD,EAAME,OAAO,GAAGC,cAAcH,EAAMI,MAAM,IAI9CC,CAAWd,EAAMC,MAAMK,OAAe,IAAEN,EAAMC,MAAMc,IAC7Db,IAAAC,cAAA,UAAQG,KAAK,SAASF,UAAU,QAAQY,eAAa,QAAQC,aAAW,WCP3D,SAASC,EAAOlB,GAC7B,OACEE,IAAAC,cAAA,OAAKC,UAAS,kCAAAC,OAAoCL,EAAMmB,KAAI,QAAAd,OAAOL,EAAMmB,OACrEjB,IAAAC,cAAA,OAAKC,UAAU,mBACXF,IAAAC,cAAA,KAAGC,UAAU,eAAegB,KAAK,KAAKpB,EAAMqB,OAC5CnB,IAAAC,cAAA,UAAQC,UAAU,iBAAiBE,KAAK,SAASgB,iBAAe,WAAWC,iBAAe,0BAA0BC,gBAAc,yBAAyBC,gBAAc,QAAQR,aAAW,qBACxLf,IAAAC,cAAA,QAAMC,UAAU,yBAEpBF,IAAAC,cAAA,OAAKC,UAAU,2BAA2BsB,GAAG,0BACzCxB,IAAAC,cAAA,MAAIC,UAAU,mCACVF,IAAAC,cAAA,MAAIC,UAAU,YACVF,IAAAC,cAAA,KAAGC,UAAU,kBAAkBuB,eAAa,OAAOP,KAAK,KAAI,SAEhElB,IAAAC,cAAA,MAAIC,UAAU,YACVF,IAAAC,cAAA,KAAGC,UAAU,WAAWgB,KAAK,KAAKpB,EAAM4B,aAQhD1B,IAAAC,cAAA,OAAKC,UAAS,+BAAAC,OAA8C,UAAbL,EAAMmB,KAAe,OAAO,UACvEjB,IAAAC,cAAA,SAAOC,UAAU,mBAAmByB,QAAS7B,EAAM8B,WAAYxB,KAAK,WAAWoB,GAAG,2BAClFxB,IAAAC,cAAA,SAAOC,UAAU,mBAAmB2B,QAAQ,0BAAyB,uBC1B1E,SAASC,EAAShC,GAC7B,MAAOiC,EAAMC,GAAWC,mBAAS,IAmCjC,OACIjC,IAAAC,cAAAD,IAAAkC,SAAA,KACAlC,IAAAC,cAAA,OAAKC,UAAU,YAAYiC,MAAO,CAACC,MAAsB,SAAftC,EAAMmB,KAAgB,QAAQ,YACpEjB,IAAAC,cAAA,UAAKH,EAAMuC,SACXrC,IAAAC,cAAA,OAAKC,UAAU,QACXF,IAAAC,cAAA,YACIC,UAAU,eACVoC,MAAOP,EACPQ,SAZQC,IAEpBR,EAAQQ,EAAMC,OAAOH,QAWTd,GAAG,QACHkB,KAAK,IACLP,MAAO,CAACQ,gBAAgC,SAAf7C,EAAMmB,KAAgB,OAAO,QAAQmB,MAAsB,SAAftC,EAAMmB,KAAgB,QAAQ,cAG3GjB,IAAAC,cAAA,UAAQC,UAAU,uBAAuByB,QAhD3BiB,KAElB,IAAIC,EAAUd,EAAKrB,cACnBsB,EAAQa,GACR/C,EAAMgD,UAAU,uBAAuB,aA4C8B,wBAGjE9C,IAAAC,cAAA,UAAQC,UAAU,uBAAuByB,QA7C3BoB,KAElB,IAAIF,EAAUd,EAAKvB,cACnBwB,EAAQa,GACR/C,EAAMgD,UAAU,uBAAuB,aAyC8B,wBAGjE9C,IAAAC,cAAA,UAAQC,UAAU,uBAAuByB,QA1CxBqB,KAGrBhB,EADc,KAEdlC,EAAMgD,UAAU,qBAAqB,aAsCmC,cAGpE9C,IAAAC,cAAA,UAAQC,UAAU,uBAAuByB,QAjC9BsB,KACf,IAAIlB,EAAOmB,SAASC,eAAe,SACnCpB,EAAKqB,SACLC,UAAUC,UAAUC,UAAUxB,EAAKO,OACnCxC,EAAMgD,UAAU,cAAc,aA6BoC,aAG9D9C,IAAAC,cAAA,UAAQC,UAAU,uBAAuByB,QA1CvB6B,KAEtB,IAAIX,EAAUd,EAAK0B,MAAM,QACzBzB,EAAQa,EAAQa,KAAK,MACrB5D,EAAMgD,UAAU,kCAAkC,aAsCuB,wBAIzE9C,IAAAC,cAAA,OAAKC,UAAU,kBAAkBiC,MAAO,CAACC,MAAsB,SAAftC,EAAMmB,KAAgB,QAAQ,YAC1EjB,IAAAC,cAAA,UAAI,qBACJD,IAAAC,cAAA,SAAI8B,EAAK0B,MAAM,KAAKE,OAAO,cAAY5B,EAAK4B,OAAO,eACnD3D,IAAAC,cAAA,SAAI,KAAQ8B,EAAK0B,MAAM,KAAKE,OAAO,gBACnC3D,IAAAC,cAAA,UAAI,WACJD,IAAAC,cAAA,SAAI8B,EAAK4B,OAAO,EAAE5B,EAAK,+BDlCnCf,EAAO4C,aAAe,CACpBzC,MAAO,iBACPO,UAAW,oBEaEmC,MA1Cf,WACE,MAAO5C,EAAM6C,GAAW7B,mBAAS,UAC1BlC,EAAOgE,GAAY9B,mBAAS,MAC7Ba,EAAYA,CAACkB,EAAS5D,KAC1B2D,EAAS,CACPlD,IAAKmD,EACL5D,KAAMA,IAER6D,WAAW,KACTF,EAAS,OACR,OAgBL,OACE/D,IAAAC,cAAA,WACED,IAAAC,cAACe,EAAM,CAACG,MAAM,YAAYO,UAAU,SAAST,KAAMA,EAAMW,WAhB1CA,KACJ,UAATX,GACF6C,EAAQ,QACRZ,SAASgB,KAAK/B,MAAMQ,gBAAe,UACnCG,EAAU,4BAA6B,WACvCI,SAAS/B,MAAQ,wBAGjB2C,EAAQ,SACRZ,SAASgB,KAAK/B,MAAMQ,gBAAe,QACnCG,EAAU,6BAA8B,WACxCI,SAAS/B,MAAQ,2BAMjBnB,IAAAC,cAACJ,EAAK,CAACE,MAAOA,IACdC,IAAAC,cAAA,OAAKC,UAAU,kBAEbF,IAAAC,cAAC6B,EAAQ,CAACO,QAAQ,kCAAkCpB,KAAMA,EAAM6B,UAAWA,OC/BpEqB,MAZSC,IAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,KAAKC,IAAkD,IAAjD,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,QAAEC,GAASL,EACpEC,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAOP,GACPQ,EAAQR,MCDDS,IAASC,WAAW5B,SAASC,eAAe,SACpD4B,OACH/E,IAAAC,cAACD,IAAMgF,WAAU,KACfhF,IAAAC,cAAC4D,EAAG,QAORM,K","file":"static/js/main.e52d56bc.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    const capitalize =(word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase()+lower.slice(1);\r\n    }\r\n  return (\r\nprops.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n  <strong>{capitalize(props.alert.type)}</strong>:{props.alert.msg}\r\n  <button type=\"button\" className=\"close\" data-dismiss=\"alert\" aria-label=\"Close\">\r\n    {/* <span aria-hidden=\"true\">&times;</span> */}\r\n  </button>\r\n</div>\r\n  )\r\n}\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n        <div className=\"container-fluid\">\r\n            <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\r\n            <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                <span className=\"navbar-toggler-icon\"></span>\r\n            </button>\r\n            <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                    <li className=\"nav-item\">\r\n                        <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n                    </li>\r\n                    <li className=\"nav-item\">\r\n                        <a className=\"nav-link\" href=\"#\">{props.aboutText}</a>\r\n                    </li>\r\n                </ul>\r\n                {/* <form className=\"d-flex\">\r\n                    <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n                    <button cla\r\n                    ssName=\"btn btn-primary\" type=\"submit\">Search</button>\r\n                </form> */}\r\n                <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n                    <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n                    <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable DarkMode</label>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </nav>\r\n)\r\n}\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  aboutText: PropTypes.string.isRequired,\r\n};\r\nNavbar.defaultProps = {\r\n  title: \"set title here\",\r\n  aboutText: \"about textutiles\",\r\n};\r\n","import React, { useState } from \"react\";\r\nexport default function TextForm(props) {\r\n    const [text, setText] = useState(\"\");\r\n    const handleUpClick = () => {\r\n        // console.log(\"you call uppercase button\")\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Convert to uppercase\",\"success\");\r\n    };\r\n    const handleLoClick = () => {\r\n        // console.log(\"you call uppercase button\")\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Convert to lowercase\",\"success\");\r\n    };\r\n    const handleClearClick = () => {\r\n        // console.log(\"you call uppercase button\")\r\n        let newText = \" \";\r\n        setText(newText);\r\n        props.showAlert(\"clear successfully\",\"success\");\r\n    };\r\n    const handleExtraSpaces = () => {\r\n        // console.log(\"you call uppercase button\")\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"));\r\n        props.showAlert(\"extra space remove successfully\",\"success\");\r\n    };\r\n    const handleCopy = () => {\r\n        var text = document.getElementById(\"myBox\");\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n        props.showAlert(\"text copied\",\"success\");\r\n    };\r\n    const handleOnChange = (event) => {\r\n        // console.log(\"onchange click\");\r\n        setText(event.target.value);\r\n    };\r\n    return (\r\n        <>\r\n        <div className=\"container\" style={{color: props.mode === 'dark'?'white':'#042743'}}>\r\n            <h1>{props.heading}</h1>\r\n            <div className=\"mb-3\">\r\n                <textarea\r\n                    className=\"form-control\"\r\n                    value={text}\r\n                    onChange={handleOnChange}\r\n                    id=\"myBox\"\r\n                    rows=\"8\"\r\n                    style={{backgroundColor: props.mode === 'dark'?'gray':'white',color: props.mode === 'dark'?'white':'#042743'}}\r\n                    ></textarea>\r\n            </div>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleUpClick}>\r\n                Convert to Uppercase\r\n            </button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleLoClick}>\r\n                Convert to Lowercase\r\n            </button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleClearClick}>\r\n                Clear Text\r\n            </button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleCopy}>\r\n                Copy Text\r\n            </button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleExtraSpaces}>\r\n             Remove Extra Spaces\r\n            </button>\r\n        </div>\r\n        <div className=\"container my-3 \" style={{color: props.mode === 'dark'?'white':'#042743'}}>\r\n            <h2>Your text summary</h2>\r\n            <p>{text.split(\" \").length} words and {text.length} characters</p>\r\n            <p>{0.008 * text.split(\" \").length}minutes read</p>\r\n            <h2>Preview</h2>\r\n            <p>{text.length>0?text:'enter somthing to preview'}</p>\r\n        </div>\r\n        </>\r\n    );\r\n}\r\n","// import logo from './logo.svg';\n// import { useState } from 'react'\nimport './App.css';\nimport Alert from './components/Alert';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport About from './components/About';\nimport React, { useState } from 'react';\n\n\n\nfunction App() {\n  const [mode, setMode] = useState('light');\n  const [alert, setAlert] = useState(null);\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null)\n    }, 1500)\n  }\n  const toggleMode = () => {\n    if (mode === 'light') {\n      setMode('dark');\n      document.body.style.backgroundColor = `#042743`;\n      showAlert(\"Dark mode has been enable\", \"success\");\n      document.title = \"TextUtils Dark Mode\";\n    }\n    else {\n      setMode('light');\n      document.body.style.backgroundColor = `white`;\n      showAlert(\"Light mode has been enable\", \"success\");\n      document.title = \"TextUtils Light Mode\";\n    }\n  }\n  return (\n    <div>\n      <Navbar title=\"TextUtils\" aboutText=\"About \" mode={mode} toggleMode={toggleMode} />\n      <Alert alert={alert} />\n      <div className='container my-3'>\n        {/* <About/> */}\n        <TextForm heading=\"Enter the text to analyze below\" mode={mode} showAlert={showAlert} />\n\n\n      </div>\n\n    </div>\n    \n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}